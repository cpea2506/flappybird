'use strict';class Pipe{constructor(a=new Game){this.game=a,this.pipeImg=this.random=null,this.pipes=[],this.pipes[0]={x:500,y:Math.floor(241*Math.random()+120),w:52,gap:85}}init(){this.random=Math.floor(2*Math.random()),this.loadImage()}loadImage(){switch(this.pipeImg=new Image,this.random){case 0:this.pipeImg.src="img/pipe-green.webp";break;case 1:this.pipeImg.src="img/pipe-red.webp";}}update(){const a=this.game.currentState,b=this.game.state;a===b.play&&this.pipes.forEach((a,b)=>{this.pipes[b].x--,130===this.pipes[b].x&&this.pipes.push({x:this.game.width,y:Math.floor(241*Math.random()+120),w:52,gap:85}),5===this.pipes[b].x+this.pipes[b].w&&this.pipes.shift()})}draw(){const a=this.game.offContext,b=this.game.width,c=this.game.height;this.pipes.forEach((d,e)=>{a.drawImage(this.pipeImg,this.pipes[e].x,this.pipes[e].y),a.save(),a.translate(b/2,c/2),a.rotate(Math.PI),a.scale(-1,1),a.drawImage(this.pipeImg,this.pipes[e].x-b/2,-c/2+512-this.pipes[e].y+this.pipes[e].gap),a.restore()})}}